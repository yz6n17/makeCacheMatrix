# makeCacheMatrix
## The program caches the inverse of a matrix by 
1) making a matrix
## able to cache its inverse and 
2) calculating the inverse.


## This function creates a matrix able to cache its inverse.

makeCacheMatrix <- function(x = numeric()) {
        m <- NULL
        set <- function(z) {
                x <<- z
                m <<- NULL
        }
        get <- function() x
        setsolve <- function(solve) so <<- solve
        getsolve <- function() so
        list(set = set, get = get,
             setsolve = setsolve,
             getsolve = getsolve)
} 

# cacheSolve
## This function either calculates the inverse of the matrix or gets 
## the inverse from the cache, depending on if the inverse has been
## computed.
cacheSolve <- function(x) {
        so <- x$getsolve()
        if(!is.null(so)) {
                message("getting cached data")
                return(so)
        }
        data <- x$get()
        so <- solve(data, ...)
        x$setsolve(so)
        so
}
